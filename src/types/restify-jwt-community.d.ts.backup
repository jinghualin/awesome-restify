import errors = require("restify-error");
import unless = require("express-unless");
import restify = require("restify");
import express = require("express");

export = jwt;
declare function jwt(options: jwt.Options): jwt.RequestHandler;
declare namespace jwt {
    export type secretType = string | Buffer;
    export type ErrorCode =
        "revoked_token" |
        "invalid_token" |
        "credentials_bad_scheme" |
        "credentials_bad_format" |
        "credentials_required";

    export interface SecretCallbackLong {
        (req: restify.Request, header: any, payload: any, done: (err: any, secret?: secretType) => void): void;
    }
    export interface SecretCallback {
        (req: restify.Request, payload: any, done: (err: any, secret?: secretType) => void): void;
    }
    export interface IsRevokedCallback {
        (req: restify.Request, payload: any, done: (err: any, revoked?: boolean) => void): void;
    }
    export interface GetTokenCallback {
        (req: restify.Request): any;
    }
    export interface Options {
        secret: secretType | SecretCallback | SecretCallbackLong;
        userProperty?: string;
        skip?: string[];
        credentialsRequired?: boolean;
        isRevoked?: IsRevokedCallback;
        requestProperty?: string;
        getToken?: GetTokenCallback;
        [property: string]: any;
    }
    export interface RequestHandler extends express.RequestHandler {
        unless: typeof unless;
    }

    export class UnauthorizedError extends Error  {
        status: number;
        message: string;
        name: "UnauthorizedError";
        code: ErrorCode;
        inner: { message: string };

        constructor(code: ErrorCode, error: { message: string });
    }
}
declare global {
    namespace  Express {
        export interface Request {
            user?: any;
        }
    }
}
